import { InstanceProvider, EdgeInstance, LabelInstance, Color } from "deltav";
import { AxisDataType, Vec2, Vec3 } from "src/types";
declare type Bucket = {
    displayLabel: boolean;
    displayTick: boolean;
    tick?: EdgeInstance;
    label1?: LabelInstance;
    label2?: LabelInstance;
    label3?: LabelInstance;
};
export interface IAxisStoreOptions {
    view: {
        origin: Vec2;
        size: Vec2;
    };
    providers?: {
        ticks?: InstanceProvider<EdgeInstance>;
        labels?: InstanceProvider<LabelInstance>;
    };
    labelColor?: Color;
    labelSize?: number;
    labelHighlightColor?: Color;
    labelPadding?: number;
    tickWidth?: number;
    tickLength?: number;
    type: AxisDataType;
    labels?: string[];
    startDate?: Date | string;
    endDate?: Date | string;
    numberRange?: Vec2;
    numberGap?: number;
    maxLabelLength?: number;
    verticalLayout?: boolean;
}
export declare class AxisStore {
    verticalLayout: boolean;
    axisChanged: boolean;
    resizeWithWindow: boolean;
    type: AxisDataType;
    view: {
        origin: Vec2;
        size: Vec2;
    };
    tickWidth: number;
    tickLength: number;
    tickStartWidth: number;
    tickStartHeight: number;
    labelSize: number;
    labelColor: Color;
    labelPadding: number;
    maxLabelWidth: number;
    maxLabelHeight: number;
    maxLabelLengh: number;
    preSetMaxWidth: number;
    preSetMaxHeight: number;
    decimalLength: number;
    labels: string[];
    maxRange: Vec2;
    viewRange: Vec2;
    numberRange: Vec2;
    numberGap: number;
    startDate: Date;
    endDate: Date;
    totalYears: number;
    unitNumber: number;
    unitWidth: number;
    unitHeight: number;
    offset: number;
    scale: number;
    windowWidth: number;
    windowHeight: number;
    interval: number;
    lowerInterval: number;
    higherInterval: number;
    preInterval: number;
    labelInterval: number;
    lowerLabelInterval: number;
    tickInterval: number;
    lowerTickInterval: number;
    labelScaleLevel: number;
    preLabelScaleLevel: number;
    tickScaleLevel: number;
    preTickScaleLevel: number;
    labelIntervalLengths: number[];
    tickIntervalLengths: number[];
    indexRange: Vec2;
    bucketMap: Map<number, Bucket>;
    auxLines: EdgeInstance[];
    headLabel: LabelInstance;
    tailLabel: LabelInstance;
    providers: {
        ticks: InstanceProvider<EdgeInstance>;
        labels: InstanceProvider<LabelInstance>;
    };
    constructor(options: IAxisStoreOptions);
    getPreSetWidth(): number;
    getPreSetHeight(): number;
    drawAuxilaryLines(): void;
    init(): void;
    initType(options: IAxisStoreOptions): void;
    initChartMetrics(): void;
    generateDateInterval(): void;
    changeAxis(): void;
    removeAll(): void;
    posToDomain(pos: number): string;
    resize(): void;
    getLabelText(index: number): string;
    getDateLabel1(index: number): string;
    getDateLabel2(index: number): string;
    createNewLabel(text: string, position: Vec2, alpha: number, padding: number): LabelInstance;
    updateLabel(label: LabelInstance, position: Vec2, alpha: number, padding: number): void;
    createTick(position: Vec2, alpha: number): EdgeInstance;
    updateTick(tick: EdgeInstance, position: Vec2, alpha: number): void;
    setBucket(index: number, position: Vec2, alpha: number): void;
    setDateLabel(index: number, position: Vec2, alpha: number): void;
    setDateTick(index: number, position: Vec2, alpha: number): void;
    getRangeLabels(): void;
    layoutLabels(): void;
    layoutHorizon(): void;
    layoutVertical(): void;
    setView(view: {
        origin: Vec2;
        size: Vec2;
    }): void;
    setDateRange(startDate: string | Date, endDate: string | Date): void;
    setNumberRange(start: number, end: number): void;
    layoutLabelOrNumber(alpha: number): void;
    layoutDateLabels(tickAlpha: number, labelAlpha: number): void;
    removeBuckets(start: number, end: number): void;
    removeLabelOrNumberBuckets(start: number, end: number, interval: number): void;
    removeDateBuckets(start: number, end: number, lowerLevel: number, higherLevel?: number): void;
    removeDateLabels(start: number, end: number, lowerLevel: number, higherLevel?: number): void;
    removeDateTicks(start: number, end: number, lowerLevel: number, higherLevel?: number): void;
    updateRegularInterval(): void;
    updateDateInterval(): void;
    updateInterval(): void;
    updateIndexRange(): void;
    updateScale(mouse: Vec2, scale: Vec3): void;
    updateOffset(offset: Vec3): void;
    updateMaxRange(low: number, high: number, length: number): void;
}
export {};
